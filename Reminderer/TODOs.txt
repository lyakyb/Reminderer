New models (Reminder/Schedule) which inherit Task as base class. Make the app still work with the model changes. 
After that, refactor RemindererManager and use Repository Pattern instead. (ReminderRepository, ScheduleRepository). Then, worry about notifications.
Maybe RM can have repositories as properties, DI into it. That way RM can maybe stay as singleton

------ IDatabaseManager now has a method that returns the last insert id, which is used to set the id on a task model so it can later actually delete it after notifying



Work on unit testing until either lol or 3pm after lunch
- Mock data service
- Db/notification stuff first
- Ui check (ui values and task values mapped properly)l
​

Maybe move edit from double click to right click for reminders, and make double click to turn on/off notifications (look at timer .change)
- rmdrmngr should have turn notificationOn/OffForTask

After all this system tray icon minimize => context menu to quit.
Then find a way to make it an exe or just archive it as a zip lol

Very future stuff:
Notification animation
Notification location setting
Just make UI look nicer
​

